name: Manual Task Runner
on:
  workflow_dispatch:
    inputs:
      task_description:
        description: '📝 Task Description (What do you want the agent to do?)'
        required: true
        type: string
      task_type:
        description: '🏷️ Task Type'
        required: true
        type: choice
        options:
          - 'bug-fix'
          - 'feature'
          - 'refactor'
          - 'documentation'
          - 'testing'
          - 'optimization'
          - 'other'
        default: 'feature'
      branch_name:
        description: '🌿 Custom Branch Name (leave empty for auto-generated)'
        required: false
        type: string
      create_pr:
        description: '📤 Create Pull Request?'
        required: true
        type: boolean
        default: true
      pr_draft:
        description: '📋 Create as Draft PR?'
        required: true
        type: boolean
        default: true
      run_tests:
        description: '🧪 Run Tests Before Creating PR?'
        required: true
        type: boolean
        default: true
      target_branch:
        description: '🎯 Target Branch for PR'
        required: false
        type: string
        default: 'main'
      additional_context:
        description: '💡 Additional Context/Instructions (optional)'
        required: false
        type: string

jobs:
  execute-task:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      actions: read
    steps:
      - name: 📊 Display Task Summary
        run: |
          echo "╔══════════════════════════════════════════════════════════════╗"
          echo "║              🤖 COPILOT AGENT - TASK EXECUTION              ║"
          echo "╚══════════════════════════════════════════════════════════════╝"
          echo ""
          echo "📝 Task Type: ${{ github.event.inputs.task_type }}"
          echo "🎯 Target Branch: ${{ github.event.inputs.target_branch }}"
          echo "📤 Create PR: ${{ github.event.inputs.create_pr }}"
          echo "📋 Draft PR: ${{ github.event.inputs.pr_draft }}"
          echo "🧪 Run Tests: ${{ github.event.inputs.run_tests }}"
          echo ""
          echo "📄 Task Description:"
          echo "─────────────────────────────────────────────────────────────"
          echo "${{ github.event.inputs.task_description }}"
          echo "─────────────────────────────────────────────────────────────"
          echo ""
          echo "🚀 Starting autonomous execution..."
          echo ""
      
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.event.inputs.target_branch }}
      
      - name: 🔧 Set up Git identity
        run: |
          git config user.name "Copilot Agent[bot]"
          git config user.email "copilot-agent[bot]@users.noreply.github.com"
      
      - name: 📦 Install opencode
        run: |
          echo "📦 Installing OpenCode CLI..."
          curl -fsSL https://opencode.ai/install | bash
          echo "✅ OpenCode installed successfully"
          
          # Add to PATH for this step
          echo "$HOME/.opencode/bin" >> $GITHUB_PATH
      
      - name: ⚙️ Configure Codestral
        run: |
          echo "⚙️ Configuring Codestral..."
          mkdir -p ~/.opencode
          
          # Use hardcoded key as fallback for testing
          API_KEY="${{ secrets.CODESTRAL_API_KEY }}"
          if [ -z "$API_KEY" ]; then
            echo "⚠️ Using fallback API key for testing"
            API_KEY="DXfXAjwNIZcAv1ESKtoDwWZZF98lJxho"
          fi
          
          cat > ~/.opencode/config.yaml << EOF
          providers:
            codestral:
              name: "Codestral"
              module: "@ai-sdk/openai-compatible"
              options:
                baseURL: "https://codestral.mistral.ai/v1"
                apiKey: "${API_KEY}"
              models:
                agent:
                  id: "codestral-2501"
                  name: "Copilot Agent"
          defaultModel: "codestral/agent"
          EOF
          echo "✅ Configuration complete"
          
          # Verify config (mask the key)
          echo "Config preview:"
          cat ~/.opencode/config.yaml | sed 's/apiKey: .*/apiKey: [REDACTED]/'
      
      
      - name: 🔍 Generate branch name
        id: branch_name
        run: |
          if [ -n "${{ github.event.inputs.branch_name }}" ]; then
            BRANCH_NAME="${{ github.event.inputs.branch_name }}"
          else
            TIMESTAMP=$(date +%Y%m%d-%H%M%S)
            TASK_TYPE="${{ github.event.inputs.task_type }}"
            SLUG=$(echo "${{ github.event.inputs.task_description }}" | head -c 30 | tr '[:upper:]' '[:lower:]' | tr -cs '[:alnum:]' '-' | sed 's/-$//')
            BRANCH_NAME="copilot/${TASK_TYPE}/${SLUG}-${TIMESTAMP}"
          fi
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "🌿 Branch name: ${BRANCH_NAME}"
      

      - name: 🤖 Execute Task with Autonomous AI Agent
        id: agent_execution
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OPENCODE_PERMISSION: |
            {
              "bash": {
                "gh *": "allow",
                "git *": "allow",
                "npm *": "allow",
                "yarn *": "allow",
                "pnpm *": "allow",
                "pip *": "allow",
                "pip3 *": "allow",
                "poetry *": "allow",
                "python *": "allow",
                "python3 *": "allow",
                "node *": "allow",
                "cargo *": "allow",
                "rustc *": "allow",
                "go *": "allow",
                "make *": "allow",
                "mvn *": "allow",
                "gradle *": "allow",
                "docker build *": "allow",
                "docker run *": "allow",
                "kubectl *": "deny",
                "terraform *": "deny",
                "rm -rf /*": "deny",
                "rm -fr /*": "deny",
                "rm -rf *": "deny",
                "rm -fr *": "deny",
                "chmod -R 777 *": "deny",
                "*": "allow"
              },
              "filesystem": {
                ".git/config": "deny",
                ".git/hooks/*": "deny",
                ".github/workflows/*": "read",
                "/etc/*": "deny",
                "/usr/*": "deny",
                "/var/*": "deny",
                "*": "allow"
              },
              "webfetch": "allow"
            }
        run: |
          source ~/.bashrc 2>/dev/null || true
          export PATH="$HOME/.opencode/bin:$PATH"
          
          echo "=== Diagnostics ==="
          echo "OpenCode version:"
          opencode --version || echo "Failed to get version"
          echo ""
          echo "Config file:"
          cat ~/.opencode/config.yaml | sed 's/apiKey: .*/apiKey: [REDACTED]/' || echo "No config file"
          echo ""
          
          set +e
          opencode run -m codestral/agent "You are an autonomous coding agent executing this task:

          TASK: ${{ github.event.inputs.task_description }}
          TYPE: ${{ github.event.inputs.task_type }}
          BRANCH: ${{ steps.branch_name.outputs.branch_name }}
          TARGET: ${{ github.event.inputs.target_branch }}
          CREATE_PR: ${{ github.event.inputs.create_pr }}
          RUN_TESTS: ${{ github.event.inputs.run_tests }}

          INSTRUCTIONS:
          1. Explore the repository structure (ls, find, cat)
          2. Create branch: git checkout -b ${{ steps.branch_name.outputs.branch_name }}
          3. Implement the solution following existing code patterns
          4. Make atomic commits: git commit -m 'type: description'
          5. Run tests if enabled: npm test / pytest / cargo test
          6. Push: git push -u origin ${{ steps.branch_name.outputs.branch_name }}
          7. Create PR if enabled: gh pr create --title '[Copilot] ${{ github.event.inputs.task_type }}: <description>' --base ${{ github.event.inputs.target_branch }}

          Execute this task now and show your progress."
          
          EXIT_CODE=$?
          
          if [ $EXIT_CODE -ne 0 ]; then
            echo ""
            echo "=== OpenCode Failed with exit code $EXIT_CODE ==="
            echo ""
            echo "Log file contents:"
            LOG_FILE=$(ls -t ~/.local/share/opencode/log/*.log 2>/dev/null | head -1)
            if [ -f "$LOG_FILE" ]; then
              cat "$LOG_FILE"
            else
              echo "No log file found"
            fi
            exit $EXIT_CODE
          fi
      
      - name: 📊 Generate Execution Report
        if: always()
        id: report
        run: |
          echo "╔══════════════════════════════════════════════════════════════╗"
          echo "║              📊 WORKFLOW EXECUTION REPORT                    ║"
          echo "╚══════════════════════════════════════════════════════════════╝"
          echo ""
          echo "✅ Task: ${{ github.event.inputs.task_type }}"
          echo "🌿 Branch: ${{ steps.branch_name.outputs.branch_name }}"
          echo "📅 Completed: $(date)"
          echo "👤 Requested by: ${{ github.actor }}"
          echo ""
          
          # Check if PR was created
          if [ "${{ github.event.inputs.create_pr }}" == "true" ]; then
            echo "Checking for created PR..."
            PR_URL=$(gh pr list --head "${{ steps.branch_name.outputs.branch_name }}" --json url --jq '.[0].url' 2>/dev/null || echo "")
            if [ -n "$PR_URL" ]; then
              echo "✅ Pull Request Created: $PR_URL"
              echo "pr_url=$PR_URL" >> $GITHUB_OUTPUT
            fi
          fi
          
          echo ""
          echo "🔗 Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          echo ""
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: ✅ Success Notification
        if: success()
        run: |
          echo "╔══════════════════════════════════════════════════════════════╗"
          echo "║                  ✅ TASK COMPLETED SUCCESSFULLY              ║"
          echo "╚══════════════════════════════════════════════════════════════╝"
          echo ""
          echo "🎉 Your task has been completed!"
          echo ""
          if [ -n "${{ steps.report.outputs.pr_url }}" ]; then
            echo "📤 Pull Request: ${{ steps.report.outputs.pr_url }}"
            echo ""
            echo "Next steps:"
            echo "1. Review the PR"
            echo "2. Check the implementation"
            echo "3. Run any additional manual tests"
            echo "4. Merge when satisfied"
          else
            echo "🌿 Changes are on branch: ${{ steps.branch_name.outputs.branch_name }}"
            echo ""
            echo "Next steps:"
            echo "1. Check out the branch locally"
            echo "2. Review the changes"
            echo "3. Create a PR manually if desired"
          fi
          echo ""
      
      - name: ❌ Failure Notification
        if: failure()
        run: |
          echo "╔══════════════════════════════════════════════════════════════╗"
          echo "║                  ⚠️ TASK EXECUTION FAILED                   ║"
          echo "╚══════════════════════════════════════════════════════════════╝"
          echo ""
          echo "❌ The task could not be completed automatically."
          echo ""
          echo "Common issues:"
          echo "• CODESTRAL_API_KEY not set in GitHub Secrets"
          echo "• API key is invalid or expired"
          echo "• Network connectivity issues"
          echo "• Tests failed during execution"
          echo "• Build errors"
          echo "• Task description was unclear"
          echo ""
          echo "📋 Check the logs above for details"
          echo "🔗 Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
