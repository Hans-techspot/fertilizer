name: 'ðŸ¤– Fully Autonomous Gemini Agent'

on:
  workflow_call:
    inputs:
      additional_context:
        type: 'string'
        description: 'Task description for the autonomous agent'
        required: false

concurrency:
  group: '${{ github.workflow }}-autonomous-${{ github.event_name }}-${{ github.event.pull_request.number || github.event.issue.number }}'
  cancel-in-progress: false

defaults:
  run:
    shell: 'bash'

jobs:
  autonomous:
    runs-on: 'ubuntu-latest'
    permissions:
      contents: 'read'        # Writes via MCP, not direct
      id-token: 'write'
      issues: 'write'
      pull-requests: 'write'

    steps:
      - name: 'Mint identity token'
        id: 'mint_identity_token'
        if: ${{ vars.APP_ID }}
        uses: 'actions/create-github-app-token@a8d616148505b5069dccd32f177bb87d7f39123b'
        with:
          app-id: '${{ vars.APP_ID }}'
          private-key: '${{ secrets.APP_PRIVATE_KEY }}'
          permission-contents: 'read'
          permission-issues: 'write'
          permission-pull-requests: 'write'

      - name: 'Run Autonomous Gemini Agent'
        uses: 'google-github-actions/run-gemini-cli@v0'
        env:
          TITLE: '${{ github.event.pull_request.title || github.event.issue.title }}'
          DESCRIPTION: '${{ github.event.pull_request.body || github.event.issue.body }}'
          EVENT_NAME: '${{ github.event_name }}'
          GITHUB_TOKEN: '${{ steps.mint_identity_token.outputs.token || secrets.GITHUB_TOKEN || github.token }}'
          IS_PULL_REQUEST: '${{ !!github.event.pull_request }}'
          ISSUE_NUMBER: '${{ github.event.pull_request.number || github.event.issue.number }}'
          REPOSITORY: '${{ github.repository }}'
          ADDITIONAL_CONTEXT: '${{ inputs.additional_context }}'
        with:
          gemini_api_key: '${{ secrets.GEMINI_API_KEY }}'
          gemini_model: '${{ vars.GEMINI_MODEL || ''gemini-1.5-pro'' }}'
          gemini_cli_version: '${{ vars.GEMINI_CLI_VERSION || ''latest'' }}'

          # ðŸ”§ Keep official settings (secure & functional)
          settings: |-
            {
              "model": { "maxSessionTurns": 30 },
              "mcpServers": {
                "github": {
                  "command": "docker",
                  "args": ["run", "-i", "--rm", "-e", "GITHUB_PERSONAL_ACCESS_TOKEN", "ghcr.io/github/github-mcp-server"],
                  "includeTools": [
                    "get_file_contents", "search_code", "get_issue", "get_pull_request_files",
                    "create_branch", "create_or_update_file", "push_files", "create_pull_request",
                    "add_issue_comment", "get_issue_comments", "list_commits", "get_commit"
                  ],
                  "env": { "GITHUB_PERSONAL_ACCESS_TOKEN": "${GITHUB_TOKEN}" }
                }
              },
              "tools": {
                "core": [
                  "run_shell_command(cat)",
                  "run_shell_command(grep)",
                  "run_shell_command(ls)"
                ]
              }
            }

          # ðŸš€ TRANSFORMED PROMPT: FULL AUTONOMY
          prompt: |-
            You are a world-class **fully autonomous** AI software engineer.
            Your task: ${{ inputs.additional_context }}

            ## ðŸ”¥ Execution Protocol (NO APPROVAL NEEDED)
            1. **Explore the full repository** using `mcp__github__get_file_contents` and `search_code`.
            2. **Analyze deeply** to understand architecture, dependencies, and patterns.
            3. **Plan internally** â€” but **do not post a plan or wait for approval**.
            4. **Execute immediately**: modify, create, or enhance files as needed.
            5. **Work on a new branch**: always use `create_branch` (e.g., `gemini/autonomous-task`).
            6. **Commit with Conventional Commits** (`feat:`, `fix:`, etc.).
            7. **Create a pull request** to propose changes.
            8. **Post a final summary** in the issue/PR using `add_issue_comment`.

            ## ðŸ›¡ Security & Quality Rules
            - NEVER delete files unless explicitly requested.
            - NEVER use dangerous shell commands (`rm`, `cp`, `eval`).
            - NEVER expose secrets or full config file contents.
            - If the task is ambiguous, destructive, or out of scope, **abort and explain why**.

            Begin now. You have full context and authority to complete this task autonomously.
